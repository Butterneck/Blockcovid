version: '3.7'

services:
  message-broker:
    image: rabbitmq:3.8-management
    environment:
      - RABBITMQ_DEFAULT_USER=admin
      - RABBITMQ_DEFAULT_PASS=admin
    ports:
      - "5672:5672"
      - "15672:15672"
    networks:
      - main_network

  # Inventory microservice
  inventory:
    build:
      dockerfile: docker/dockerfile.develop
      context: ../inventory
    volumes:
      - ../inventory:/app
    ports:
      - "9232:9232"
      - "3002:3002"
    env_file:
      - ../inventory/.env.development # TODO: improve this
    networks:
      - main_network
      - inventory_network
    depends_on: 
      - message-broker
      - inventory-data-persistence
    # logging:
    #   driver: loki
    #   options:
    #     loki-url: "loki:3100/loki/api/v1/push"

  inventory-data-persistence:
    image: bitnami/mongodb:4.2
    environment:
      - MONGODB_ADVERTISED_HOSTNAME=inventory-data-persistence
      - MONGODB_REPLICA_SET_MODE=primary
      - MONGODB_ROOT_PASSWORD=password
      - MONGODB_REPLICA_SET_KEY=replicasetkey123
      - MONGODB_USERNAME=user
      - MONGODB_PASSWORD=password
      - MONGODB_DATABASE=blockcovid
    volumes:
      - inventory-mongo-volume:/bitnami
    ports:
      - "27018:27017"
    networks:
      - inventory_network
    # logging:
    #   driver: loki
    #   options:
    #     loki-url: "loki:3100/loki/api/v1/push"


  # Blockchain-interactor microservice
  blockchain-interactor:
    build:
      dockerfile: docker/dockerfile.develop
      context: ../blockchain-interactor
    volumes:
      - ../blockchain-interactor:/app
    ports:
      - "9231:9231"
      - "3001:3001"
    environment:
      - MINIO_SERVER_ACCESS_KEY=minio-access-key
      - MINIO_SERVER_SECRET_KEY=minio-secret-key
      - MINIO_DEFAULT_BUCKETS=blockchain-events
    env_file:
      - ../blockchain-interactor/.env.development # TODO: improve this
    networks:
      - main_network
      - blockchain-interactor_network
    depends_on: 
      - message-broker
      - blockchain-interactor-data-persistence
    # logging:
    #   driver: loki
    #   options:
    #     loki-url: "loki:3100/loki/api/v1/push"

  blockchain-interactor-data-persistence:
    image: bitnami/mongodb:4.2
    environment:
      - MONGODB_ADVERTISED_HOSTNAME=blockchain-interactor-data-persistence
      - MONGODB_REPLICA_SET_MODE=primary
      - MONGODB_ROOT_PASSWORD=password
      - MONGODB_REPLICA_SET_KEY=replicasetkey123
      - MONGODB_USERNAME=user
      - MONGODB_PASSWORD=password
      - MONGODB_DATABASE=blockcovid
    volumes:
      - blockchain-interactor-mongo-volume:/bitnami
    ports:
      - "27017:27017"
    networks:
      - blockchain-interactor_network
    # logging:
    #   driver: loki
    #   options:
    #     loki-url: "loki:3100/loki/api/v1/push"

  # Booking microservice
  booking:
    build:
      dockerfile: docker/dockerfile.develop
      context: ../booking
    volumes:
      - ../booking:/app
    ports:
      - "9234:9234"
      - "3004:3004"
    env_file:
      - ../booking/.env.development # TODO: improve this
    networks:
      - main_network
      - booking_network
    depends_on: 
      - message-broker
      - booking-data-persistence
    # logging:
    #   driver: loki
    #   options:
    #     loki-url: "loki:3100/loki/api/v1/push"

  booking-data-persistence:
    image: bitnami/mongodb:4.2
    environment:
      - MONGODB_ADVERTISED_HOSTNAME=booking-data-persistence
      - MONGODB_REPLICA_SET_MODE=primary
      - MONGODB_ROOT_PASSWORD=password
      - MONGODB_REPLICA_SET_KEY=replicasetkey123
      - MONGODB_USERNAME=user
      - MONGODB_PASSWORD=password
      - MONGODB_DATABASE=blockcovid
    volumes:
      - booking-mongo-volume:/bitnami
    ports:
      - "27019:27017"
    networks:
      - booking_network
    # logging:
    #   driver: loki
    #   options:
    #     loki-url: "loki:3100/loki/api/v1/push"

  # Identities microservice
  identities:
    build:
      dockerfile: docker/dockerfile.develop
      context: ../identities
    volumes:
      - ../identities:/app
    ports:
      - "9233:9233"
      - "3003:3003"
    env_file:
      - ../identities/.env.development # TODO: improve this
    networks:
      - main_network
    # logging:
    #   driver: loki
    #   options:
    #     loki-url: "loki:3100/loki/api/v1/push"


  # API Gateway
  api-gateway:
    build:
      dockerfile: dockerfile
      context: ../api-gateway
    environment:
      - KONG_DATABASE=off
      - KONG_DECLARATIVE_CONFIG=/usr/local/kong/declarative/kong.yml
      - KONG_PROXY_ACCESS_LOG=/dev/stdout
      - KONG_ADMIN_ACCESS_LOG=/dev/stdout
      - KONG_PROXY_ERROR_LOG=/dev/stderr
      - KONG_ADMIN_ERROR_LOG=/dev/stderr
      - KONG_ADMIN_LISTEN=0.0.0.0:8001
    volumes:
      - ./routes:/usr/local/kong/declarative
    ports:
      - "80:8000"
      - "8001:8001"
    networks:
      - main_network
    # logging:
    #   driver: loki
    #   options:
    #     loki-url: "loki:3100/loki/api/v1/push"


  # Web Interface
  web-interface:
    build:
      dockerfile: docker/dockerfile.develop
      context: ../web-interface
    volumes:
      - ../web-interface/:/app/
    ports:
      - "4200:4200"
    networks:
      - main_network

  object-storage:
    image: bitnami/minio
    environment:
      - MINIO_ACCESS_KEY=minio-access-key
      - MINIO_SECRET_KEY=minio-secret-key
    ports:
      - 9000:9000
    volumes:
      - object-storage:/data
    networks:
      - main_network

networks:
  main_network:
    name: main_network
  blockchain-interactor_network:
    name: blockchain-interactor_network
  inventory_network:
    name: inventory_network
  booking_network:
    name: booking_network

volumes:
  blockchain-interactor-mongo-volume:
    driver: local
  inventory-mongo-volume:
    driver: local
  booking-mongo-volume:
    driver: local
  object-storage:
    driver: local
